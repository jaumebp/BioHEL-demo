#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1540] =
    {   0,
        0,    0,   91,   89,   88,   88,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   88,    0,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    0,    0,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   42,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    3,    0,
        0,    0,    0,    0,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   51,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,   43,    0,    0,    0,    0,
        0,    3,    3,    0,    0,    0,    0,    0,   30,   30,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   86,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,   38,    0,    0,    0,    0,    0,    0,
       43,    0,    0,    0,    0,    0,    3,    0,    0,    0,
        0,   33,   30,    0,   31,    0,    0,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       48,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   33,   33,
        0,   31,   31,    0,    0,   34,   34,    0,    0,    0,
        0,    0,   44,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   41,    0,    0,   53,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   33,    0,   31,    0,
        0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
       41,   66,   27,   52,    0,   68,    0,    0,   49,    0,
        0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   40,   37,    0,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
        0,   41,    0,   68,   68,   71,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   55,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,    0,    0,   68,   71,   71,    0,    0,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   10,    0,    0,    0,   71,    0,    0,

        0,    0,    0,    0,    0,    0,   13,    0,    0,    0,
        0,   67,    0,    0,    0,   14,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   12,
       85,    8,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   35,   35,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   63,    0,    0,
        0,    0,   70,   85,   85,    0,    0,    0,    0,    0,
       50,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
        0,   76,    0,   22,    0,    0,    0,    0,    0,    0,
       63,   63,    0,    9,    0,    0,   70,   70,   85,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   16,
        0,    0,    0,    0,    0,    0,   78,    0,    0,   56,

       79,   75,   76,   76,   20,    0,    0,    0,    0,   73,
       63,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,   16,    0,    0,    0,
        0,    0,    0,   78,   78,    0,    0,   56,   56,   79,
       79,   75,   75,   76,   21,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,   16,    0,    0,    0,    0,    0,
        0,   78,    0,    0,   56,   79,   75,    0,    0,    0,
        0,   64,    0,   59,    0,    0,    0,    0,   58,   58,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,

        0,    0,    0,    0,    0,   19,    0,    0,    0,   64,
       64,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,   15,   15,    0,    0,    0,    0,
        0,   23,   36,    0,    0,    0,   64,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
        0,    0,    0,    0,    0,   23,   23,   36,   36,    0,
        0,    0,    0,    0,    0,   61,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   47,    0,    0,   23,
       36,    0,    0,    0,   80,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,    0,    0,

        0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   72,   60,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,   69,    0,    0,
        0,    0,    0,    0,    0,    0,    6,    5,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,   25,    0,    0,    0,    0,    0,    0,
        0,   25,   25,    0,    0,    0,    0,    0,    0,    0,
       25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       81,    0,    0,    0,    0,    0,   77,    0,   82,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,    0,    0,   26,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,   65,    0,    0,    0,    0,    0,   46,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    1,    8,    8,    9,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
        1,    1,    1,    1,    1,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   26,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[61] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[1546] =
    {   0,
        0,    0, 3084, 3085,   59,   62, 3080,   54,   39,   85,
       67,   52,   52,   54,  100,   51,   69,   70,  107,  131,
      122,   68,   58,   86,   87, 3079, 3085,  107,   99,  111,
      113,  128,  102,  124,  138,  132,  148,  144,  150,  144,
      151,  159,  150,  153,  170,  173, 3077,  145,  169,  167,
      171,  156,  173,  172,  176,  184,  187,  181,  197,  199,
      197,  214,  198,  211,  206, 3076,  213,  217,  222,  208,
      223,  211,  231,  227,  233,  227,  223,  225,  235,  228,
      236,  248,  238,  252,  246,  248,  247,  250,  263, 3075,
     3074,  263, 3073,  269,  276,  283,  278,  268,  280,  280,

      268,  285,  286,  289,  273,  281,  301,  287, 3072,  303,
      291,  313,  310,  305,  299,  301,  303, 3071, 3070,  302,
      322, 3069,  317,  324,  326,  327,  331,  335,  320,  321,
      327,  337,  348,  346,  329,  341,  353,  350,  360, 3068,
      372,  345,  348,  349,  359, 3067,  365,  363,  360,  366,
      367, 3066,  386, 3065,  371,  382,  382,  395,  386,  385,
     3064,  389, 3063, 3062,  401,  395,  406,  407,  405,  413,
      418,  402,  409,  412,  414, 3061,  416,  417,  421,  425,
      439,  422,  438,  432,  431,  434,  442,  448,  448,  456,
      446,  449,  446,  462,  456,  463,  467,  476,  501,  465,

      467,  472,  476,  481,  489,  464,  485, 3060, 3059,  498,
      485,  490,  503,  506,  518,  505,  506,  517,  509,  518,
      517,  517, 3058,  530,  517,  538,  533,  543, 3057,  532,
      551,  554,  556, 3056,  558,  553,  557, 3085,  562,  550,
     3085,  551,  549,  559,  570,  568,  576,  560,  566,  566,
     3055,  559,  560,  568,  572,  592,  585,  595,  588,  601,
      604,  602,  607, 3054,  596,  615, 3053,  607,  616,  613,
      606,  618,  609,  617,  612,  622,  630,  630,  633,  630,
      633,  645,  646,  651, 3052, 3051,  645,  635,  645,  652,
     3050,  663,  650, 3049,  665,  663,  669,  660,  670,  666,

      664,  663,  681,  678,  680,  667,  670,  683,  671,  684,
      685,  686,  685,  702,  705,  705,  700,  704,  715,  703,
      717,  714,  723,  724,  725,  714, 3048,  715,  717,  715,
      730,  734,  728,  728,  732,  739,  745,  750,  753,  747,
      747, 3047, 3046,  748,  748, 3045,  752,  769,   68,  769,
      769,  770,  767,  765,  763,  770, 3044,  770,  779,  780,
      780,  774,  781, 3043,  770,  785,  787,  792,  792,  803,
      804,  813,  809, 3042,  811,  817,  809,  819, 3041, 3040,
      811,  809,  824,  822,  827, 3039,  822,  820,  823,  839,
      835,  830,  860,  846,  839,  851,  822,  857,  854,  850,

      851,  858,  861,  861,  860,  869, 3038,  877,  866,  879,
      881,  895, 3037,  876,  917,  880,  881,  884,  884,  887,
      890,  897,  902,  905,  920,  904,  925,  924,  927,  913,
      926,  933,  917,  934,  937,  920, 3036,  942,  926,  928,
       75,  942,  930,  931,  944,  949,  963,  945,  945,  950,
      950,  970,  978,  970,  964,  963,  972,  966, 3035,  966,
      968,  985,  986,  978,  991,  980,  984,  982, 3034,  982,
      983,  999,  989, 1009, 3033,  995, 1003,  998, 1008, 3032,
     1008, 1015, 1030, 1017, 1028, 1038, 1047, 1034, 1025, 1037,
     1042, 1028, 1025, 1033, 1033, 1033, 1038, 1046, 1041, 1062,

     1050, 1048, 1052, 1051, 3031, 1062, 1067, 1073, 1053, 1068,
     1073, 3030, 1085, 1067, 1074, 1075, 1092, 1085, 1104, 1086,
     1092, 1108, 1101, 3029, 1116, 1092, 3028, 3027, 1116, 3026,
     1119, 1102, 1119, 1106, 1113, 1124, 1112, 3025, 1124, 1123,
     1133, 1137, 1121, 3085, 3024, 3023, 1134, 1135, 1132, 1124,
     1129, 1129, 1160, 1152, 1150, 1143, 1150, 1168, 1176, 1159,
     1161, 1177, 1162, 1175, 1170, 1169, 1182, 1178, 1173, 1191,
     1184, 1185, 1192, 1191, 1186, 1193, 1209, 1185, 3022, 1199,
     1208, 3021, 1200, 1201, 1232, 1235, 1201, 1224, 3020, 1233,
     1234, 1243, 1249, 3019, 1218, 1233, 1247, 1253, 1257, 1260,

     1245, 1267, 1258, 1251, 1269, 1256, 1257, 1256, 1267, 3018,
     3017, 3016, 1260, 1261, 1262, 1269, 1270, 3085, 1284, 1266,
     1281, 1265, 1278, 1290, 3015, 1276, 1284, 1291, 1281, 1296,
     1280, 1296, 1301, 3085, 1290, 1286, 1294, 1306, 1307, 1319,
     3014, 3013, 1324, 3012, 1308, 1309, 3011, 1318, 1319, 1316,
     1322, 1343, 1332, 3085, 1321, 1325, 1336, 1327, 1335, 1346,
     1358, 1350, 1357, 1347, 1347, 1353, 1374, 1353, 1365, 1367,
     1357, 1384, 1380, 1384, 1399, 1371, 1377, 1406, 1383, 3010,
     1392, 1380, 1397, 1408, 1386, 1394, 1395, 1403, 1406, 1410,
     1423, 1409, 3009, 1401, 1423, 1410, 1430, 1410, 1411, 1429,

     1424, 1423, 3008, 1422, 1421, 3007, 3006, 1435, 1427, 1432,
     3005, 1438, 1430, 1447, 1451, 1446, 3004, 1438, 1456, 1455,
     1446, 1453, 3003, 1464, 3002, 1463, 1459, 3001, 1463, 1458,
     3000, 1466, 1474, 1463, 1480, 1471, 1465, 1491, 1499, 1508,
     1482, 1504, 1523, 1485, 1485, 1525, 1529, 1501, 1515, 1495,
     1513, 1507, 1532, 1527, 1517, 1533, 2999, 1515, 1527, 1518,
     1544, 2998, 1529, 1529, 1552, 1533, 1547, 3085, 1537, 1539,
     1571, 2997, 1557,    0, 1540, 1559, 1551, 2996, 1552, 1555,
     1563, 1561, 1565, 1562, 1582, 1582, 2995, 2994, 1573, 2993,
     1587, 1572, 1595, 1588, 2992, 1598, 1598, 2991, 1600, 1604,

     1591, 1598, 2990, 2989, 1604, 1598, 1619, 1603, 1621, 1596,
     1618, 1629, 1619, 1620, 1622, 1625, 2988, 1636, 2987, 1638,
     1638, 1626, 1634, 1627, 1641, 1630, 1654, 2978, 2977, 1658,
     1676, 3085, 3085, 3085, 1636, 1680, 1662, 1639,    0, 1645,
     2976, 3085, 1647, 1649, 1666, 1681, 2975, 1668, 1671, 1674,
     1675, 1669, 1670, 1671, 1675, 1679, 3085, 1696, 1678, 1681,
     1701, 1678, 1704, 1685, 1688, 1693, 1706, 1713, 1722, 2973,
     2972, 1693, 1706, 2971, 2970, 1720, 1710, 1714,    0, 1713,
     1716, 1715, 1717, 1720, 1725, 1731, 2969, 1736, 1746, 1748,
     1740, 1771, 1740, 1773, 1778, 1781, 1741, 1753, 1786, 1744,

     2968, 1750, 1756, 1746, 1764, 2967, 1787, 1785, 1773, 1793,
     1790, 1795, 1776, 2966, 1799, 2965, 1802, 1783, 1786, 2963,
     1786, 1794, 1812, 1801, 1802, 1813, 1804, 1812, 1816, 1808,
     1828, 1820,    0, 1817, 1816, 1833, 1839, 1827, 1836, 1826,
     1848, 1848, 1854, 1838, 1843, 1873, 1877, 1880, 1845, 1854,
     1886, 1864, 1865, 1869, 1854, 1876, 1868,    0, 1870, 1887,
     1887, 1882, 1879, 1874, 1881, 2962, 1901, 1882, 1897, 1887,
     2961, 1897, 1906, 1887, 1911, 1926, 1904, 1894, 2956, 1895,
     1910, 1914, 1910, 1930, 1918, 2887, 1929, 1929, 1939, 1930,
     1944, 2850, 1939, 1949, 1939, 1936, 1933, 1958, 2809, 2765,

     1935, 1954, 1943, 2749, 2742, 1945,    0, 1946, 1946, 1949,
     1950, 3085, 2727, 2695, 1972, 1983, 1966, 1978, 1975, 1984,
     1969, 1980, 2660, 1995, 1978, 1978, 2003, 1994, 1987, 1998,
     1989, 1991, 2004, 2016, 2011, 2014, 2617, 2013, 2605, 2005,
     2011, 2561, 2007, 2554,    0, 2028, 2010, 2013, 2026, 2034,
     2038, 2019, 2539, 2033, 2505, 2039, 2045, 2046, 2034, 2056,
     2060, 2038, 2059, 2062, 2049, 2064, 2052, 2070, 2056, 2072,
     2082, 2058, 2065, 2064, 2065, 2492, 2460, 2071, 2094, 2078,
     2457, 2088, 2079, 2105, 2079, 2444, 2092, 2083, 2107,    0,
     2120, 3085, 2091, 2099, 2098, 2101, 2118, 2125, 2113, 2117,

     2112, 2120, 2121, 2129, 2138, 2433, 2119, 2121, 2120, 2125,
     2400, 2126, 2363, 2125, 2148, 2152, 2320, 2317, 2275, 2224,
     2163, 2174, 2141, 2152, 2160, 2145, 2161, 2178, 2165,    0,
     2176, 2167, 2186, 2188, 2195, 2218, 2175, 2176, 2176, 2179,
     2200, 2188, 2194, 3085, 2203, 2204, 2208, 2211, 2197, 2194,
     2197, 2217, 2197, 2218, 2225, 2217, 2233, 2222, 2237, 2243,
     2247, 2256, 2251, 2258, 2230, 2222, 2243, 2241, 2241, 2243,
     2264, 2268, 2267,    0, 2250, 2250, 2276, 2279, 2281, 2264,
     2135, 2263, 2265, 2045, 2013, 2266, 2269, 2270, 2279, 2293,
     2276, 2293, 2281, 2281, 2293, 2302, 2306, 2294, 2297, 2322,

     2332, 2340, 2318, 2343, 1952, 2304, 2326, 2329, 2318, 3085,
     2345, 1941, 2328, 2329, 2350, 2333, 2328, 2333, 2345, 2356,
     2348, 2342, 2344, 2345, 1909, 2366, 2386, 1810, 2348, 2355,
     2363, 2354, 2364, 2379, 2404, 2367, 2378, 2391, 2411, 2406,
     2414, 2416, 2419, 2421, 3085, 1802, 2379, 2395, 2414, 2425,
     2418, 2411, 2426, 2422, 2417, 2431, 2436, 2417, 2430, 2421,
     1796, 2432, 2433, 2442, 2445, 2447, 1759, 2426, 2435, 2443,
     1756, 2461, 1652, 1649, 2471, 2475, 2479, 2481, 2449, 2448,
     2470, 2484, 2466, 3085, 2477, 2468, 2468, 2471, 2494, 2497,
     2494, 2483, 2497, 2488, 2498, 2499, 2502, 2509, 2502, 2509,

     2502, 1552, 2517, 2520, 2522, 2524, 2518, 2524, 2514, 2539,
     2547, 2516, 2519, 2535, 2543, 2530, 2552, 2536, 2550, 2538,
     2552, 2553, 2554, 2554, 2568, 2572, 2551, 2555, 1539, 2564,
     2573, 2587, 2594, 2564, 2566, 2563, 2596, 2588, 2590, 1489,
     2583, 2600, 2606, 2590, 1481, 1453, 2605, 2606, 2592, 2615,
     2607, 1351, 2618, 2614, 2610, 2622, 2629, 2640, 2649, 2617,
     2623, 2627, 2632, 2637, 2624, 3085, 2625, 2631, 2644, 2640,
     2653, 2639, 2641, 2641, 2642, 2664, 2666, 2651, 2650, 2673,
     2675, 1332, 1278, 2658, 3085, 2660, 2670, 1186, 2677, 2673,
     2685, 2671, 2673, 2674, 2674, 1167, 2698, 2680, 2681, 2704,

     2708, 3085, 2700, 2704, 2711, 2698, 2708, 2709, 2703, 1144,
     1126, 2721, 2729, 1116, 2710, 2733, 2735, 2724, 2720, 2741,
     2728, 2739, 1004, 2727, 2750, 2754, 2738, 2757, 2755, 2754,
      946, 2741,  894,  842, 2744, 2756, 2767, 2772, 2768, 2762,
     2762, 2771,  832, 2779, 2781, 2774, 2781, 2773, 2787, 2785,
     2770, 2790, 2795, 2798, 2798, 2784, 2786, 2788, 2796, 2806,
     2797, 2821, 2824, 2797, 2798,  736, 2806, 2806, 2809, 2813,
     2834, 2817, 2834, 2842, 2835,  584, 2821, 2828, 2823, 2830,
     2856, 2847, 2858,  506, 2840,  446, 3085, 2852, 2863, 2855,
     2851, 2855, 2863, 2855, 2854, 2864, 2859, 2873, 2875, 2867,

     2864, 2867, 2868, 2881,  372, 2888, 3085, 2871, 2897, 2876,
     2889, 2883, 2891, 2896, 3085,  342, 2908, 2897, 2908, 2904,
     2905, 2906,  156, 2903, 2922, 2930,  115,  110, 2933, 2937,
     2914, 2941, 2919, 2942, 2934,   91, 2950, 2955, 3085, 2983,
     2985,   84,   77, 2987,   65
    } ;

static const flex_int16_t yy_def[1546] =
    {   0,
     1539,    1, 1539, 1539, 1539, 1539, 1540, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1540, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1541, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1541, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1542, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1542, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1543, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1543, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1544, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1544,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1545,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1545, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,    0, 1539,
     1539, 1539, 1539, 1539, 1539
    } ;

static const flex_int16_t yy_nxt[3146] =
    {   0,
        4,    5,    6,    5,    7,    4,    4,    4,    4,    8,
        9,   10,   11,   12,   13,    4,   14,   15,    4,   16,
        4,   17,   18,    4,   19,    4,   20,   21,   22,   23,
        4,   24,    4,    4,    4,    8,    9,   10,   11,   12,
       13,    4,   14,   15,    4,   16,    4,   17,   18,    4,
       19,   20,   21,   22,   23,    4,   24,    4,    4,    4,
       25,   25,   25,   25,   25,   25,   28, 1174,   30,   41,
       36,   42,   39,   50,   29,  415,  415,   47,   48, 1007,
       37,   49,  513,  513,   40,   64,  933,   43,   25,   25,
       25,   63,   28,   30, 1537,   41,   38,   42,   39,   51,

       29,   31,   47,   65,   48,   32,   37,   49,   33,   40,
       64,   34,   43, 1531,   35,   44,   52,   63, 1530,   66,
       53,   38,   45,   67,   51,   68,   69,   31,   46,   65,
       54,   32,   71,   55,   33,   60,   34,   70,   61,   35,
       56,   44,   52,   62,   57,   66,   53,   72,   45,   67,
       73,   68,   69,   46,   58,   74,   54,   71,   55, 1526,
       59,   60,   75,   70,   61,   77,   56,   78,   79,   62,
       57,   80,   83,   72,   84,   85,   73,   90,   76,   81,
       58,   74,   94,   82,   86,   59,   88,   87,   75,   91,
       92,   77,   93,   78,   79,   95,   96,   80,   83,   97,

       84,   85,   90,   76,   81,   98,   99,   94,   82,  102,
       86,  100,   88,   87,  101,   91,   92,  103,   93,  104,
      105,   95,   96,  106,  109,   97,  107,  108,  110,  112,
       98,  113,   99,  114,  102,  115,  116,  100,  117,  101,
      118,  119,  120,  103,  121,  104,  105,  122,  124,  106,
      109,  107,  108,  123,  110,  112,  125,  113,  126,  114,
      115,  127,  116,  117,  128,  129,  118,  119,  120,  130,
      121,  131,  134,  122,  124,  132,  133,  140,  123,  135,
      136,  125,  142,  137,  126,  143,  144,  127,  146,  128,
      147,  129,  148,  149,  151,  130,  150,  131,  134,  152,

      132,  133,  153,  140,  154,  135,  136,  155,  142,  137,
      156,  143,  145,  157,  146,  159,  147,  160,  148,  149,
      151,  150,  161,  162,  163,  152,  164,  165,  153,  154,
      166,  169,  155,  170,  172,  173,  156,  145,  157,  174,
      175,  159,  160,  176,  177, 1519,  178,  179,  161,  162,
      163,  164,  165,  180,  181,  166,  169,  182,  183,  170,
      172,  173,  184,  185,  186,  174,  175,  187,  196,  176,
      177,  178,  179,  195,  188, 1509,  197,  189,  180,  198,
      181,  192,  200,  182,  183,  193,  201,  184,  202,  185,
      186,  190,  203,  187,  196,  204,  194,  206,  195,  208,

      188,  197,  209,  189,  210,  198,  211,  192,  200,  212,
      218,  193,  201,  202,  213,  215,  190,  203,  219,  220,
      204,  221,  194,  206,  208,  222,  223,  224,  209,  227,
      210,  225,  211,  226,  234,  212,  218,  228,  229,  213,
      215,  230,  232,  233,  219,  220,  235,  221,  236, 1492,
      237,  222,  223,  224,  227,  238,  239,  225,  240,  226,
      234,  241,  228,  229,  242,  243,  230,  232,  233,  246,
      244,  250,  235,  247,  236,  237,  245,  248,  249,  251,
      252,  238,  239,  240,  253,  254,  241,  263,  264,  265,
      242,  243,  270,  266,  267,  246,  244,  250,  247,  271,

      268,  245,  248,  249,  269,  251,  252,  274,  275, 1490,
      253,  254,  255,  263,  264,  265,  256,  270,  257,  266,
      267,  276,  258,  277,  259,  271,  268,  260,  261,  278,
      269,  279,  282,  274,  275,  262,  280,  281,  255,  283,
      284,  288,  256,  285,  257,  286,  276,  289,  258,  277,
      259,  290,  260,  261,  291,  278,  292,  279,  282,  294,
      262,  280,  281,  295,  283,  296,  284,  288,  285,  297,
      286,  299,  289,  300,  301,  302,  306,  290,  303,  304,
      291,  305,  292,  307,  294,  308,  309, 1483,  310,  295,
      311,  296,  312,  314,  315,  297,  316,  299,  317,  300,

      301,  302,  306,  303,  304,  318,  305,  319,  320,  307,
      321,  308,  309,  310,  322,  326,  311,  312,  314,  315,
      323,  316,  327,  317,  329,  324,  330,  332,  325,  333,
      334,  318,  335,  319,  320,  336,  321,  337,  338,  340,
      322,  326,  339,  341,  342,  343,  323,  344,  327,  329,
      345,  324,  330,  332,  325,  333,  334,  335,  346,  347,
      348,  336,  337,  353,  338,  340,  351,  339,  354,  341,
      342,  343,  352,  344,  355,  357,  345,  358,  360,  361,
      362,  363,  364,  365,  346,  347,  348,  366,  353,  367,
      368,  369,  351,  370,  354,  371,  372,  352,  373,  377,

      355,  357,  358,  374,  360,  361,  362,  363,  364,  365,
      375,  376,  378,  366,  367,  379,  368,  369,  380,  370,
      371,  372,  381,  382,  373,  377,  383,  384,  374,  385,
      386,  387,  388,  389,  395,  375,  376,  378,  390, 1474,
      392,  379,  394,  396,  380,  391,  397,  398,  381,  382,
      399,  400,  383,  384,  385,  401,  386,  387,  388,  389,
      395,  402,  403,  404,  390,  392,  405,  394,  396,  406,
      410,  391,  397,  398,  407,  411,  399,  400,  413,  414,
      416,  401,  417,  418,  419,  420,  421,  402,  403,  404,
      422,  425,  405,  426,  427,  406,  410,  428,  430,  407,

      411,  423,  429,  413,  432,  414,  416,  433,  417,  418,
      419,  420,  421,  434,  435,  437,  422,  425,  436,  426,
      427,  438,  439,  428,  430,  440,  423,  429,  442,  432,
      443,  444,  445,  433,  448, 1452,  449,  450,  434,  451,
      435,  437,  452,  436,  454, 1445,  455,  438,  439,  456,
      457,  440,  458,  459,  442,  466,  443,  444,  445,  463,
      448,  449,  464,  450,  465,  451,  467,  468,  452,  460,
      454,  455,  469,  470,  456,  471,  457,  461,  458,  459,
      466,  462,  472,  473,  475,  463,  474,  477,  464,  478,
      465,  479,  467,  468,  480,  460,  485, 1444,  469,  470,

      488,  471,  489,  461,  490,  481,  494,  462,  472,  473,
      475,  474,  482,  477,  491,  478,  492,  479,  493,  495,
      480,  483,  485,  486,  487,  487,  488,  496,  489,  497,
      490,  481,  494,  498,  499,  500,  501,  503,  482,  491,
      502,  492,  504,  493,  505,  495,  483,  506,  507, 1442,
      508,  510,  514,  496,  511,  497,  512,  515,  498,  516,
      499,  500,  501,  503,  517,  502,  518,  520,  504,  505,
      519,  519,  521,  506,  507,  508,  522,  510,  514,  511,
      523,  512,  515,  524,  516,  525,  525,  526,  527,  529,
      517,  528,  518,  520,  530,  532,  533,  521,  534,  536,

      537,  522,  535,  538,  539,  523,  540, 1435,  541,  524,
      543,  544,  545,  526,  527,  529,  528,  546,  547,  530,
      532,  533,  549,  550,  534,  536,  537,  551,  535,  538,
      539,  552,  540,  541,  554,  543,  544,  555,  545,  556,
      557,  558,  546,  560,  547,  559,  559,  549,  561,  550,
      562,  563,  551,  486,  487,  487,  564,  552,  565,  554,
      566,  567,  568,  555,  569,  556,  557,  558,  570,  560,
      571,  572,  573,  578,  561,  574,  562,  563,  575,  576,
      579,  564,  580,  565,  581,  566,  567,  568,  582,  569,
      583,  585,  586,  586,  570,  571,  587,  572,  573,  578,

      574,  588,  589,  575,  576,  590,  579,  591,  580,  581,
      592,  593,  593,  594,  582,  595,  583,  596,  597, 1429,
      601,  587,  599,  600,  600,  604,  588,  589,  606, 1426,
      607,  590,  608,  591,  609,  610,  611,  614,  594,  612,
      615,  595,  616,  596,  597,  601,  617, 1425,  618,  621,
      622,  604,  623,  624,  606,  607,  625,  626,  608,  609,
      627,  610,  611,  614,  612,  630,  615,  631,  616,  628,
     1413,  632,  617,  618,  633,  621,  622,  629,  623,  624,
      634,  625,  626,  559,  559,  627,  635,  636,  637, 1405,
      638,  630,  639,  631,  640,  628,  632,  641,  642,  643,

      633,  644,  645,  629,  646,  647,  634,  648,  649,  650,
      651,  635,  636,  654,  637,  638,  652,  652,  639,  656,
      640,  657,  641,  659,  642,  643,  644,  660,  645,  662,
      646,  647,  653,  648,  649,  650,  651,  663,  654,  661,
      661,  585,  586,  586,  665,  656,  666,  657,  669,  659,
      667,  667,  660,  670,  662,  592,  593,  593,  653,  671,
      672,  672,  674,  663,  673,  673,  599,  600,  600,  676,
      665,  677,  666,  669,  675,  675,  678,  678,  679,  670,
      680, 1401,  681,  682,  688,  671,  686,  687,  674,  689,
      690,  691,  691,  692,  693,  676,  694,  677,  695,  696,

      698,  699,  700,  701,  679,  702,  680,  681,  703,  682,
      688,  686,  687,  704,  705,  689,  690,  706,  692,  707,
      693,  694,  708,  709,  695,  696,  698,  699,  700,  701,
      710,  702,  711,  703,  714, 1400,  716,  717,  719,  704,
      705,  720,  706,  721,  707,  722,  723,  708,  724,  709,
      652,  652,  725,  726, 1376,  727,  710,  728,  711,  729,
      714,  716,  717,  730,  719,  661,  661,  720,  721,  731,
      734,  722,  723,  724,  732,  733,  735,  725,  736,  726,
      727,  667,  667,  728,  737,  729,  738,  673,  673,  730,
      739,  740,  740,  741,  745,  731,  734,  744,  748,  732,

      733,  750,  735,  751,  736,  742,  743,  743,  752,  754,
      737,  738,  746,  747,  747,  753,  753,  755,  757,  741,
      745,  756,  744,  758,  748,  759,  760,  750,  762,  751,
      691,  691,  763,  767,  752,  754,  764,  765,  765,  766,
      768,  769,  770,  755,  757,  772,  756,  773,  776,  758,
      777,  759,  760,  762,  778,  780, 1371,  781,  763,  767,
      782,  764,  783,  784,  766,  786,  768,  769,  770,  787,
      788,  772,  773,  789,  776,  790,  777,  792,  794,  795,
      778,  780,  781,  797, 1370,  798,  782,  800,  783,  784,
      786,  801, 1365,  802,  803,  787,  788,  804,  789,  805,

      806,  790,  808,  792,  794,  795,  807,  807,  810,  797,
      798,  809,  809,  800,  739,  740,  740,  801,  802,  811,
      803,  813,  804,  816,  805,  817,  806,  818,  808,  742,
      743,  743,  812,  812,  810,  746,  747,  747,  814,  753,
      753,  819, 1353,  815,  811,  820,  821,  813,  816,  823,
      824,  817,  825,  818,  826, 1330,  828,  829,  830,  831,
      831,  832,  833,  835,  814,  834,  838,  819,  815,  840,
      820,  841,  821,  842,  823,  844,  824,  825,  836,  836,
      826,  828,  829,  845,  846,  849,  832,  847,  833,  835,
      834,  848,  838,  850,  840,  851,  854,  841,  856,  842,

      857,  844,  858,  858,  859,  861,  861,  862,  845,  864,
      846,  849,  847,  865,  866,  867,  848,  870,  871,  850,
      872,  851,  854,  873,  856,  857,  807,  807,  809,  809,
      859,  874,  875,  862,  876,  864,  812,  812,  877,  865,
      866,  867,  878,  870,  871,  880,  872,  882,  873,  883,
      884,  885, 1305,  886,  887, 1304,  888,  874,  875,  893,
      876,  889,  889,  901,  877,  892,  892,  897,  878,  896,
      896,  880,  898,  882,  900,  883,  884,  885,  886,  902,
      887,  888,  830,  831,  831,  893,  894,  895,  895,  901,
      903,  905,  897,  906,  907,  908,  912,  898,  909,  900,

      910,  911,  913,  858,  858,  902,  914,  915,  861,  861,
      916,  917,  917,  918,  919,  920,  903,  905,  921,  906,
      907,  908,  912,  909,  922,  910,  911,  926,  913,  923,
      923,  914,  915,  927,  930,  916,  931,  932,  918,  919,
      934,  920,  935,  936,  921,  937,  938,  939,  940,  942,
      922,  944,  926,  889,  889,  943,  943,  945,  927, 1303,
      930,  931, 1299,  932,  949,  934,  950,  935,  936,  956,
      937,  938,  952,  939,  940,  942,  954,  944,  892,  892,
      946,  946,  955,  945,  894,  895,  895,  947,  948,  948,
      949,  957,  950,  951,  951,  956,  959,  952,  960, 1294,

      961,  954,  962,  963,  964, 1278,  966,  955,  968,  917,
      917,  970,  965, 1266,  971,  973,  957,  974,  975,  976,
      976,  977,  959,  978,  960,  961,  979,  980,  962,  963,
      964,  966,  981,  982,  968,  984,  970,  983,  965,  971,
      973,  985,  986,  974,  987,  988,  989,  977,  990,  978,
      991,  992,  979,  980,  993,  994,  994,  995,  981,  982,
      984,  943,  943,  983,  996,  997, 1000,  985,  986,  987,
      988,  999,  989, 1001,  990, 1002,  991,  992, 1003,  993,
      946,  946, 1004,  995,  998,  998,  947,  948,  948,  996,
     1005,  997, 1000,  951,  951, 1006,  999, 1008, 1009, 1001,

     1010, 1002, 1011, 1014, 1003, 1012, 1013, 1004, 1016, 1016,
     1017, 1018, 1264, 1019, 1021, 1022, 1005, 1023, 1024, 1024,
     1006, 1025, 1008, 1026, 1009, 1028, 1010, 1029, 1011, 1014,
     1012, 1013,  975,  976,  976, 1017, 1030, 1018, 1019, 1031,
     1021, 1022, 1023, 1032, 1250, 1033, 1035, 1025, 1026, 1036,
     1028, 1037, 1038, 1029, 1039, 1041,  994,  994, 1042, 1043,
     1245, 1044, 1030, 1047, 1031,  998,  998, 1048, 1052, 1032,
     1033, 1049, 1035, 1053, 1054, 1036, 1055, 1037, 1038, 1056,
     1039, 1041, 1059, 1062, 1042, 1043, 1044, 1063, 1047, 1060,
     1061, 1061, 1064, 1048, 1052, 1065, 1049, 1066, 1053, 1054,

     1067, 1055, 1024, 1024, 1056, 1069, 1070, 1073, 1059, 1062,
     1071, 1071, 1072, 1063, 1074, 1075, 1221, 1076, 1064, 1077,
     1078, 1065, 1066, 1079, 1079, 1080, 1067, 1081, 1083, 1085,
     1069, 1070, 1086, 1073, 1088, 1091, 1091, 1092, 1072, 1074,
     1093, 1075, 1076, 1094, 1077, 1095, 1078, 1096, 1220, 1097,
     1099, 1080, 1101, 1081, 1083, 1085, 1102, 1103, 1086, 1088,
     1104, 1106, 1092, 1105, 1105, 1093, 1060, 1061, 1061, 1094,
     1107, 1095, 1108, 1096, 1097, 1109, 1099, 1110, 1101, 1111,
     1112, 1114, 1102, 1103, 1113, 1104, 1117, 1106, 1115, 1116,
     1116, 1118, 1119, 1120, 1123, 1124, 1107, 1126, 1108, 1127,

     1109, 1079, 1079, 1110, 1111, 1129, 1112, 1114, 1131, 1113,
     1132, 1117, 1128, 1128, 1133, 1133, 1118, 1119, 1120, 1136,
     1123, 1124, 1137, 1126, 1138, 1127, 1134, 1135, 1135, 1139,
     1129, 1140, 1141, 1141, 1131, 1132, 1142, 1143, 1217, 1144,
     1145, 1146, 1147, 1151, 1136, 1105, 1105, 1149, 1137, 1138,
     1150, 1152, 1154, 1156, 1139, 1157, 1157, 1140, 1115, 1116,
     1116, 1165, 1142, 1143, 1144, 1166, 1145, 1146, 1147, 1151,
     1162, 1162, 1149, 1169, 1170, 1150, 1152, 1154, 1156, 1163,
     1167, 1164, 1164, 1168, 1171, 1172, 1172, 1165, 1173, 1175,
     1176, 1166, 1177, 1178, 1178, 1179, 1179, 1181, 1169, 1182,

     1170, 1134, 1135, 1135, 1183, 1184, 1167, 1141, 1141, 1168,
     1185, 1186, 1187, 1188, 1173, 1175, 1176, 1189, 1190, 1190,
     1191, 1180, 1192, 1181, 1193, 1182, 1194, 1161, 1195, 1183,
     1184, 1196, 1197, 1197, 1198, 1199, 1185, 1186, 1187, 1188,
     1157, 1157, 1205, 1189, 1200, 1200, 1191, 1192, 1206, 1193,
     1201, 1201, 1194, 1195, 1202, 1202, 1207, 1196, 1164, 1164,
     1198, 1199, 1203, 1204, 1204, 1164, 1164, 1208, 1205, 1209,
     1210, 1211, 1211, 1206, 1171, 1172, 1172, 1212, 1160, 1213,
     1214, 1216, 1207, 1215, 1215, 1177, 1178, 1178, 1179, 1179,
     1218, 1219, 1208, 1222, 1209, 1210, 1223, 1224, 1225, 1226,

     1227, 1227, 1228, 1212, 1213, 1214, 1229, 1216, 1230, 1231,
     1232, 1233, 1234, 1235, 1235, 1218, 1219, 1236, 1222, 1237,
     1159, 1223, 1224, 1158, 1225, 1244, 1244, 1228, 1238, 1239,
     1239, 1246, 1229, 1230, 1231, 1247, 1232, 1233, 1240, 1241,
     1241, 1248, 1252, 1236, 1249, 1237, 1242, 1243, 1243, 1203,
     1204, 1204, 1211, 1211, 1251, 1253, 1246, 1215, 1215, 1254,
     1255, 1247, 1256, 1257, 1257, 1258, 1155, 1248, 1252, 1249,
     1261, 1262, 1263, 1265, 1265, 1267, 1259, 1260, 1268, 1251,
     1269, 1253, 1270, 1271, 1254, 1255, 1272, 1272, 1256, 1273,
     1274, 1258, 1226, 1227, 1227, 1261, 1262, 1263, 1275, 1275,

     1267, 1259, 1260, 1153, 1268, 1279, 1269, 1270, 1280, 1271,
     1234, 1235, 1235, 1276, 1276, 1273, 1274, 1238, 1239, 1239,
     1240, 1241, 1241, 1277, 1277, 1242, 1243, 1243, 1244, 1244,
     1279, 1281, 1282, 1282, 1280, 1283, 1148, 1284, 1285, 1286,
     1287, 1288, 1289, 1290, 1290, 1291, 1292, 1130, 1293, 1295,
     1296, 1297, 1265, 1265, 1298, 1298, 1300, 1281, 1301, 1302,
     1125, 1283, 1284, 1122, 1285, 1286, 1287, 1288, 1272, 1272,
     1291, 1307, 1292, 1293, 1308, 1295, 1296, 1297, 1275, 1275,
     1309, 1300, 1276, 1276, 1301, 1302, 1277, 1277, 1306, 1306,
     1310, 1311, 1311, 1312, 1313, 1121, 1314, 1307, 1315, 1308,

     1316, 1317, 1317, 1289, 1290, 1290, 1309, 1318, 1100, 1319,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1326, 1312, 1327,
     1313, 1314, 1328, 1315, 1329, 1316, 1331, 1332, 1332, 1333,
     1333, 1306, 1306, 1318, 1319, 1334, 1320, 1321, 1322, 1323,
     1324, 1335, 1098, 1336, 1338, 1327, 1337, 1337, 1328, 1339,
     1329, 1340, 1331, 1310, 1311, 1311, 1341, 1089, 1342, 1317,
     1317, 1334, 1343, 1344, 1087, 1345, 1346, 1335, 1336, 1338,
     1347, 1348, 1349, 1351, 1339, 1350, 1350, 1340, 1325, 1326,
     1326, 1352, 1341, 1342, 1354, 1355, 1360, 1343, 1361, 1344,
     1345, 1362, 1346, 1356, 1357, 1357, 1347, 1348, 1349, 1351,

     1358, 1359, 1359, 1337, 1337, 1363, 1352, 1364, 1084, 1366,
     1354, 1355, 1360, 1367, 1361, 1368, 1362, 1369, 1372, 1373,
     1082, 1374, 1350, 1350, 1375, 1377, 1377, 1378, 1379, 1380,
     1380, 1363, 1382, 1364, 1366, 1356, 1357, 1357, 1383, 1367,
     1384, 1368, 1369, 1385, 1372, 1373, 1374, 1381, 1381, 1386,
     1375, 1387, 1388, 1378, 1379, 1358, 1359, 1359, 1382, 1389,
     1390, 1391, 1392, 1068, 1383, 1393, 1384, 1394, 1395, 1385,
     1396, 1397, 1397, 1377, 1377, 1386, 1387, 1388, 1398, 1399,
     1380, 1380, 1381, 1381, 1389, 1402, 1390, 1391, 1392, 1403,
     1393, 1404, 1394, 1395, 1406, 1396, 1407, 1408, 1058, 1409,

     1410, 1411, 1412, 1398, 1399, 1397, 1397, 1414, 1415, 1418,
     1402, 1416, 1416, 1419, 1403, 1417, 1417, 1404, 1420, 1420,
     1406, 1421, 1407, 1408, 1409, 1410, 1411, 1412, 1422, 1423,
     1057, 1424, 1414, 1415, 1427, 1418, 1428, 1428, 1430, 1419,
     1416, 1416, 1417, 1417, 1431, 1051, 1432, 1421, 1420, 1420,
     1433, 1434, 1050, 1436, 1422, 1423, 1424, 1437, 1437, 1439,
     1427, 1438, 1438, 1430, 1428, 1428, 1440, 1441, 1046, 1443,
     1431, 1432, 1446, 1447, 1437, 1437, 1433, 1434, 1436, 1438,
     1438, 1448, 1449, 1450, 1451, 1439, 1453, 1453, 1454, 1454,
     1455, 1456, 1440, 1441, 1443, 1457, 1458, 1446, 1459, 1447,

     1460, 1461, 1453, 1453, 1462, 1463, 1463, 1448, 1449, 1450,
     1451, 1464, 1045, 1465, 1466, 1467, 1455, 1456, 1468, 1469,
     1472, 1457, 1458, 1470, 1459, 1460, 1473, 1461, 1471, 1471,
     1462, 1463, 1463, 1475, 1476, 1477, 1478, 1464, 1465, 1466,
     1467, 1471, 1471, 1479, 1468, 1469, 1472, 1480, 1470, 1481,
     1481, 1473, 1482, 1040, 1484, 1485, 1486, 1487, 1475, 1476,
     1477, 1488, 1478, 1481, 1481, 1489, 1489, 1491, 1479, 1493,
     1489, 1489, 1494, 1480, 1495, 1496, 1497, 1500, 1482, 1484,
     1485, 1486, 1487, 1498, 1499, 1501, 1502, 1488, 1503, 1504,
     1034, 1505, 1491, 1506, 1507, 1493, 1508, 1510, 1494, 1511,

     1495, 1496, 1497, 1500, 1514, 1515, 1512, 1517, 1498, 1499,
     1501, 1516, 1502, 1518, 1503, 1504, 1505, 1520, 1506, 1507,
     1521, 1522, 1508, 1510, 1511, 1513, 1523, 1524, 1525, 1514,
     1527, 1515, 1512, 1517, 1528, 1534, 1516, 1529, 1529, 1518,
     1529, 1529, 1533, 1520, 1532, 1532, 1521, 1522, 1532, 1532,
     1513, 1535, 1523, 1524, 1525, 1527, 1536, 1538, 1538, 1027,
     1528, 1534, 1538, 1538, 1020, 1015,  972, 1533,  969,  967,
      958,  953,  941,  929,  928,  925,  924, 1535,  904,  899,
      891,  890, 1536,   26,   26,   26,  839,  839, 1090, 1090,
      881,  879,  869,  868,  863,  860,  855,  853,  852,  843,

      837,  827,  822,  799,  796,  793,  791,  785,  779,  775,
      774,  771,  761,  749,  718,  715,  713,  712,  697,  685,
      684,  683,  668,  664,  658,  655,  620,  619,  613,  605,
      603,  602,  598,  584,  577,  553,  548,  542,  531,  509,
      484,  476,  453,  447,  446,  441,  431,  424,  412,  409,
      408,  393,  359,  356,  350,  349,  331,  328,  313,  298,
      293,  287,  273,  272,  231,  217,  216,  214,  207,  205,
      199,  191,  171,  168,  167,  158,  141,  139,  138,  111,
       89,   27,   27, 1539,    3, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539
    } ;

static const flex_int16_t yy_chk[3146] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    6,    6,    6,    8, 1545,    9,   13,
       11,   14,   12,   18,    8,  349,  349,   16,   17, 1543,
       11,   17,  441,  441,   12,   23, 1542,   14,   25,   25,
       25,   22,    8,    9, 1536,   13,   11,   14,   12,   18,

        8,   10,   16,   24,   17,   10,   11,   17,   10,   12,
       23,   10,   14, 1528,   10,   15,   19,   22, 1527,   28,
       19,   11,   15,   29,   18,   30,   31,   10,   15,   24,
       19,   10,   33,   19,   10,   21,   10,   32,   21,   10,
       20,   15,   19,   21,   20,   28,   19,   34,   15,   29,
       35,   30,   31,   15,   20,   36,   19,   33,   19, 1523,
       20,   21,   37,   32,   21,   38,   20,   39,   40,   21,
       20,   41,   42,   34,   43,   44,   35,   48,   37,   41,
       20,   36,   52,   41,   45,   20,   46,   45,   37,   49,
       50,   38,   51,   39,   40,   53,   54,   41,   42,   55,

       43,   44,   48,   37,   41,   55,   56,   52,   41,   58,
       45,   57,   46,   45,   57,   49,   50,   59,   51,   60,
       61,   53,   54,   62,   64,   55,   63,   63,   65,   67,
       55,   68,   56,   69,   58,   70,   71,   57,   72,   57,
       73,   74,   75,   59,   76,   60,   61,   77,   79,   62,
       64,   63,   63,   78,   65,   67,   80,   68,   81,   69,
       70,   82,   71,   72,   83,   84,   73,   74,   75,   85,
       76,   86,   89,   77,   79,   87,   88,   92,   78,   89,
       89,   80,   94,   89,   81,   95,   96,   82,   97,   83,
       98,   84,   99,  100,  102,   85,  101,   86,   89,  103,

       87,   88,  104,   92,  105,   89,   89,  106,   94,   89,
      107,   95,   96,  108,   97,  110,   98,  111,   99,  100,
      102,  101,  112,  113,  114,  103,  115,  116,  104,  105,
      117,  120,  106,  121,  123,  124,  107,   96,  108,  125,
      126,  110,  111,  127,  128, 1516,  129,  130,  112,  113,
      114,  115,  116,  131,  132,  117,  120,  133,  134,  121,
      123,  124,  135,  136,  137,  125,  126,  138,  143,  127,
      128,  129,  130,  142,  139, 1505,  144,  139,  131,  145,
      132,  141,  147,  133,  134,  141,  148,  135,  149,  136,
      137,  139,  150,  138,  143,  151,  141,  153,  142,  155,

      139,  144,  156,  139,  157,  145,  158,  141,  147,  159,
      165,  141,  148,  149,  160,  162,  139,  150,  166,  167,
      151,  168,  141,  153,  155,  169,  170,  171,  156,  172,
      157,  171,  158,  171,  179,  159,  165,  173,  174,  160,
      162,  175,  177,  178,  166,  167,  180,  168,  181, 1486,
      182,  169,  170,  171,  172,  183,  184,  171,  185,  171,
      179,  186,  173,  174,  187,  188,  175,  177,  178,  190,
      189,  194,  180,  191,  181,  182,  189,  192,  193,  195,
      196,  183,  184,  185,  197,  198,  186,  200,  201,  202,
      187,  188,  206,  203,  204,  190,  189,  194,  191,  207,

      205,  189,  192,  193,  205,  195,  196,  210,  211, 1484,
      197,  198,  199,  200,  201,  202,  199,  206,  199,  203,
      204,  212,  199,  213,  199,  207,  205,  199,  199,  214,
      205,  215,  218,  210,  211,  199,  216,  217,  199,  219,
      220,  224,  199,  221,  199,  222,  212,  225,  199,  213,
      199,  226,  199,  199,  227,  214,  228,  215,  218,  230,
      199,  216,  217,  231,  219,  232,  220,  224,  221,  233,
      222,  235,  225,  236,  237,  239,  244,  226,  240,  242,
      227,  243,  228,  245,  230,  246,  247, 1476,  248,  231,
      249,  232,  250,  252,  253,  233,  254,  235,  255,  236,

      237,  239,  244,  240,  242,  256,  243,  257,  258,  245,
      259,  246,  247,  248,  260,  262,  249,  250,  252,  253,
      261,  254,  263,  255,  265,  261,  266,  268,  261,  269,
      270,  256,  271,  257,  258,  272,  259,  273,  274,  276,
      260,  262,  275,  277,  278,  279,  261,  280,  263,  265,
      281,  261,  266,  268,  261,  269,  270,  271,  282,  283,
      284,  272,  273,  288,  274,  276,  287,  275,  289,  277,
      278,  279,  287,  280,  290,  292,  281,  293,  295,  296,
      297,  298,  299,  300,  282,  283,  284,  301,  288,  302,
      303,  304,  287,  305,  289,  306,  307,  287,  308,  312,

      290,  292,  293,  309,  295,  296,  297,  298,  299,  300,
      310,  311,  313,  301,  302,  314,  303,  304,  315,  305,
      306,  307,  316,  317,  308,  312,  318,  319,  309,  320,
      321,  322,  323,  324,  329,  310,  311,  313,  325, 1466,
      326,  314,  328,  330,  315,  325,  331,  332,  316,  317,
      333,  334,  318,  319,  320,  335,  321,  322,  323,  324,
      329,  336,  337,  338,  325,  326,  339,  328,  330,  340,
      344,  325,  331,  332,  341,  345,  333,  334,  347,  348,
      350,  335,  351,  352,  353,  354,  355,  336,  337,  338,
      356,  358,  339,  359,  360,  340,  344,  361,  363,  341,

      345,  356,  362,  347,  365,  348,  350,  366,  351,  352,
      353,  354,  355,  367,  368,  370,  356,  358,  369,  359,
      360,  371,  372,  361,  363,  373,  356,  362,  375,  365,
      376,  377,  378,  366,  381, 1443,  382,  383,  367,  384,
      368,  370,  385,  369,  387, 1434,  388,  371,  372,  389,
      390,  373,  391,  392,  375,  397,  376,  377,  378,  394,
      381,  382,  395,  383,  396,  384,  398,  399,  385,  393,
      387,  388,  400,  401,  389,  402,  390,  393,  391,  392,
      397,  393,  403,  404,  406,  394,  405,  408,  395,  409,
      396,  410,  398,  399,  411,  393,  414, 1433,  400,  401,

      416,  402,  417,  393,  418,  412,  422,  393,  403,  404,
      406,  405,  412,  408,  419,  409,  420,  410,  421,  423,
      411,  412,  414,  415,  415,  415,  416,  424,  417,  425,
      418,  412,  422,  426,  427,  428,  429,  431,  412,  419,
      430,  420,  432,  421,  433,  423,  412,  434,  435, 1431,
      436,  438,  442,  424,  439,  425,  440,  443,  426,  444,
      427,  428,  429,  431,  445,  430,  446,  448,  432,  433,
      447,  447,  449,  434,  435,  436,  450,  438,  442,  439,
      451,  440,  443,  452,  444,  453,  453,  454,  455,  457,
      445,  456,  446,  448,  458,  460,  461,  449,  462,  463,

      464,  450,  462,  465,  466,  451,  467, 1423,  468,  452,
      470,  471,  472,  454,  455,  457,  456,  473,  474,  458,
      460,  461,  476,  477,  462,  463,  464,  478,  462,  465,
      466,  479,  467,  468,  481,  470,  471,  482,  472,  483,
      484,  485,  473,  488,  474,  486,  486,  476,  489,  477,
      490,  491,  478,  487,  487,  487,  492,  479,  493,  481,
      494,  495,  496,  482,  497,  483,  484,  485,  498,  488,
      499,  500,  501,  506,  489,  502,  490,  491,  503,  504,
      507,  492,  508,  493,  509,  494,  495,  496,  510,  497,
      511,  513,  513,  513,  498,  499,  514,  500,  501,  506,

      502,  515,  516,  503,  504,  517,  507,  518,  508,  509,
      519,  519,  519,  520,  510,  521,  511,  522,  523, 1414,
      526,  514,  525,  525,  525,  529,  515,  516,  531, 1411,
      532,  517,  533,  518,  534,  535,  536,  539,  520,  537,
      540,  521,  541,  522,  523,  526,  542, 1410,  543,  547,
      548,  529,  548,  549,  531,  532,  550,  551,  533,  534,
      552,  535,  536,  539,  537,  554,  540,  555,  541,  553,
     1396,  556,  542,  543,  557,  547,  548,  553,  548,  549,
      558,  550,  551,  559,  559,  552,  560,  561,  562, 1388,
      563,  554,  564,  555,  565,  553,  556,  566,  567,  568,

      557,  569,  570,  553,  571,  572,  558,  573,  574,  575,
      576,  560,  561,  578,  562,  563,  577,  577,  564,  580,
      565,  581,  566,  583,  567,  568,  569,  584,  570,  587,
      571,  572,  577,  573,  574,  575,  576,  588,  578,  585,
      585,  586,  586,  586,  590,  580,  591,  581,  595,  583,
      592,  592,  584,  596,  587,  593,  593,  593,  577,  597,
      598,  598,  601,  588,  599,  599,  600,  600,  600,  603,
      590,  604,  591,  595,  602,  602,  605,  605,  606,  596,
      607, 1383,  608,  609,  615,  597,  613,  614,  601,  616,
      617,  619,  619,  620,  621,  603,  622,  604,  623,  624,

      626,  627,  628,  629,  606,  630,  607,  608,  631,  609,
      615,  613,  614,  632,  633,  616,  617,  635,  620,  636,
      621,  622,  637,  638,  623,  624,  626,  627,  628,  629,
      639,  630,  640,  631,  643, 1382,  645,  646,  648,  632,
      633,  649,  635,  650,  636,  651,  653,  637,  655,  638,
      652,  652,  656,  657, 1352,  658,  639,  659,  640,  660,
      643,  645,  646,  662,  648,  661,  661,  649,  650,  663,
      666,  651,  653,  655,  664,  665,  668,  656,  669,  657,
      658,  667,  667,  659,  670,  660,  671,  673,  673,  662,
      672,  672,  672,  674,  677,  663,  666,  676,  679,  664,

      665,  681,  668,  682,  669,  675,  675,  675,  683,  685,
      670,  671,  678,  678,  678,  684,  684,  686,  688,  674,
      677,  687,  676,  689,  679,  690,  692,  681,  694,  682,
      691,  691,  695,  699,  683,  685,  696,  697,  697,  698,
      700,  701,  702,  686,  688,  704,  687,  705,  708,  689,
      709,  690,  692,  694,  710,  712, 1346,  713,  695,  699,
      714,  696,  715,  716,  698,  718,  700,  701,  702,  719,
      720,  704,  705,  721,  708,  722,  709,  724,  726,  727,
      710,  712,  713,  729, 1345,  730,  714,  732,  715,  716,
      718,  733, 1340,  734,  735,  719,  720,  736,  721,  737,

      738,  722,  741,  724,  726,  727,  739,  739,  744,  729,
      730,  742,  742,  732,  740,  740,  740,  733,  734,  745,
      735,  748,  736,  750,  737,  751,  738,  752,  741,  743,
      743,  743,  746,  746,  744,  747,  747,  747,  749,  753,
      753,  754, 1329,  749,  745,  755,  756,  748,  750,  758,
      759,  751,  760,  752,  761, 1302,  763,  764,  765,  765,
      765,  766,  767,  770,  749,  769,  773,  754,  749,  775,
      755,  776,  756,  777,  758,  779,  759,  760,  771,  771,
      761,  763,  764,  780,  781,  784,  766,  782,  767,  770,
      769,  783,  773,  785,  775,  786,  789,  776,  791,  777,

      792,  779,  793,  793,  794,  796,  796,  797,  780,  799,
      781,  784,  782,  800,  801,  802,  783,  805,  806,  785,
      808,  786,  789,  810,  791,  792,  807,  807,  809,  809,
      794,  811,  813,  797,  814,  799,  812,  812,  815,  800,
      801,  802,  816,  805,  806,  818,  808,  820,  810,  821,
      822,  823, 1274,  824,  825, 1273,  826,  811,  813,  835,
      814,  827,  827,  844,  815,  830,  830,  838,  816,  837,
      837,  818,  840,  820,  843,  821,  822,  823,  824,  845,
      825,  826,  831,  831,  831,  835,  836,  836,  836,  844,
      846,  848,  838,  849,  850,  851,  855,  840,  852,  843,

      853,  854,  856,  858,  858,  845,  859,  860,  861,  861,
      862,  863,  863,  864,  865,  866,  846,  848,  867,  849,
      850,  851,  855,  852,  868,  853,  854,  872,  856,  869,
      869,  859,  860,  873,  876,  862,  877,  878,  864,  865,
      880,  866,  881,  882,  867,  883,  884,  885,  886,  888,
      868,  891,  872,  889,  889,  890,  890,  893,  873, 1271,
      876,  877, 1267,  878,  897,  880,  898,  881,  882,  904,
      883,  884,  900,  885,  886,  888,  902,  891,  892,  892,
      894,  894,  903,  893,  895,  895,  895,  896,  896,  896,
      897,  905,  898,  899,  899,  904,  907,  900,  908, 1261,

      909,  902,  910,  911,  912, 1246,  913,  903,  915,  917,
      917,  918,  912, 1228,  919,  921,  905,  922,  923,  923,
      923,  924,  907,  925,  908,  909,  926,  927,  910,  911,
      912,  913,  928,  929,  915,  930,  918,  929,  912,  919,
      921,  931,  932,  922,  934,  935,  936,  924,  937,  925,
      938,  939,  926,  927,  940,  941,  941,  942,  928,  929,
      930,  943,  943,  929,  944,  945,  950,  931,  932,  934,
      935,  949,  936,  952,  937,  953,  938,  939,  954,  940,
      946,  946,  955,  942,  947,  947,  948,  948,  948,  944,
      956,  945,  950,  951,  951,  957,  949,  959,  960,  952,

      961,  953,  962,  965,  954,  963,  964,  955,  967,  967,
      968,  969, 1225,  970,  972,  973,  956,  974,  975,  975,
      957,  977,  959,  978,  960,  980,  961,  981,  962,  965,
      963,  964,  976,  976,  976,  968,  982,  969,  970,  983,
      972,  973,  974,  984, 1212,  985,  987,  977,  978,  988,
      980,  989,  990,  981,  991,  993,  994,  994,  995,  996,
     1205,  997,  982, 1001,  983,  998,  998, 1002, 1006,  984,
      985, 1003,  987, 1008, 1009,  988, 1010,  989,  990, 1011,
      991,  993, 1015, 1017,  995,  996,  997, 1018, 1001, 1016,
     1016, 1016, 1019, 1002, 1006, 1020, 1003, 1021, 1008, 1009,

     1022, 1010, 1024, 1024, 1011, 1025, 1026, 1028, 1015, 1017,
     1027, 1027, 1027, 1018, 1029, 1030, 1185, 1031, 1019, 1032,
     1033, 1020, 1021, 1034, 1034, 1035, 1022, 1036, 1038, 1040,
     1025, 1026, 1041, 1028, 1043, 1046, 1046, 1047, 1027, 1029,
     1048, 1030, 1031, 1049, 1032, 1050, 1033, 1051, 1184, 1052,
     1054, 1035, 1056, 1036, 1038, 1040, 1057, 1058, 1041, 1043,
     1059, 1062, 1047, 1060, 1060, 1048, 1061, 1061, 1061, 1049,
     1063, 1050, 1064, 1051, 1052, 1065, 1054, 1066, 1056, 1067,
     1068, 1070, 1057, 1058, 1069, 1059, 1072, 1062, 1071, 1071,
     1071, 1073, 1074, 1075, 1078, 1080, 1063, 1082, 1064, 1083,

     1065, 1079, 1079, 1066, 1067, 1085, 1068, 1070, 1087, 1069,
     1088, 1072, 1084, 1084, 1089, 1089, 1073, 1074, 1075, 1093,
     1078, 1080, 1094, 1082, 1095, 1083, 1091, 1091, 1091, 1096,
     1085, 1097, 1098, 1098, 1087, 1088, 1099, 1100, 1181, 1101,
     1102, 1103, 1104, 1109, 1093, 1105, 1105, 1107, 1094, 1095,
     1108, 1110, 1112, 1114, 1096, 1115, 1115, 1097, 1116, 1116,
     1116, 1123, 1099, 1100, 1101, 1124, 1102, 1103, 1104, 1109,
     1121, 1121, 1107, 1126, 1127, 1108, 1110, 1112, 1114, 1122,
     1125, 1122, 1122, 1125, 1128, 1128, 1128, 1123, 1129, 1131,
     1132, 1124, 1133, 1133, 1133, 1134, 1134, 1137, 1126, 1138,

     1127, 1135, 1135, 1135, 1139, 1140, 1125, 1141, 1141, 1125,
     1142, 1143, 1145, 1146, 1129, 1131, 1132, 1147, 1148, 1148,
     1149, 1136, 1150, 1137, 1151, 1138, 1152, 1120, 1153, 1139,
     1140, 1154, 1155, 1155, 1156, 1158, 1142, 1143, 1145, 1146,
     1157, 1157, 1165, 1147, 1159, 1159, 1149, 1150, 1166, 1151,
     1160, 1160, 1152, 1153, 1161, 1161, 1167, 1154, 1163, 1163,
     1156, 1158, 1162, 1162, 1162, 1164, 1164, 1168, 1165, 1169,
     1170, 1171, 1171, 1166, 1172, 1172, 1172, 1173, 1119, 1175,
     1176, 1180, 1167, 1177, 1177, 1178, 1178, 1178, 1179, 1179,
     1182, 1183, 1168, 1186, 1169, 1170, 1187, 1188, 1189, 1190,

     1190, 1190, 1191, 1173, 1175, 1176, 1192, 1180, 1193, 1194,
     1195, 1196, 1197, 1197, 1197, 1182, 1183, 1198, 1186, 1199,
     1118, 1187, 1188, 1117, 1189, 1203, 1203, 1191, 1200, 1200,
     1200, 1206, 1192, 1193, 1194, 1207, 1195, 1196, 1201, 1201,
     1201, 1208, 1214, 1198, 1209, 1199, 1202, 1202, 1202, 1204,
     1204, 1204, 1211, 1211, 1213, 1216, 1206, 1215, 1215, 1217,
     1218, 1207, 1219, 1220, 1220, 1221, 1113, 1208, 1214, 1209,
     1222, 1223, 1224, 1226, 1226, 1229, 1221, 1221, 1230, 1213,
     1231, 1216, 1232, 1233, 1217, 1218, 1234, 1234, 1219, 1236,
     1237, 1221, 1227, 1227, 1227, 1222, 1223, 1224, 1238, 1238,

     1229, 1221, 1221, 1111, 1230, 1247, 1231, 1232, 1248, 1233,
     1235, 1235, 1235, 1240, 1240, 1236, 1237, 1239, 1239, 1239,
     1241, 1241, 1241, 1242, 1242, 1243, 1243, 1243, 1244, 1244,
     1247, 1249, 1250, 1250, 1248, 1251, 1106, 1252, 1253, 1254,
     1255, 1256, 1257, 1257, 1257, 1258, 1259, 1086, 1260, 1262,
     1263, 1264, 1265, 1265, 1266, 1266, 1268, 1249, 1269, 1270,
     1081, 1251, 1252, 1077, 1253, 1254, 1255, 1256, 1272, 1272,
     1258, 1279, 1259, 1260, 1280, 1262, 1263, 1264, 1275, 1275,
     1281, 1268, 1276, 1276, 1269, 1270, 1277, 1277, 1278, 1278,
     1282, 1282, 1282, 1283, 1285, 1076, 1286, 1279, 1287, 1280,

     1288, 1289, 1289, 1290, 1290, 1290, 1281, 1291, 1055, 1292,
     1293, 1294, 1295, 1296, 1297, 1298, 1298, 1298, 1283, 1299,
     1285, 1286, 1300, 1287, 1301, 1288, 1303, 1304, 1304, 1305,
     1305, 1306, 1306, 1291, 1292, 1307, 1293, 1294, 1295, 1296,
     1297, 1308, 1053, 1309, 1312, 1299, 1310, 1310, 1300, 1313,
     1301, 1314, 1303, 1311, 1311, 1311, 1315, 1044, 1316, 1317,
     1317, 1307, 1318, 1319, 1042, 1320, 1321, 1308, 1309, 1312,
     1322, 1323, 1324, 1327, 1313, 1325, 1325, 1314, 1326, 1326,
     1326, 1328, 1315, 1316, 1330, 1331, 1334, 1318, 1335, 1319,
     1320, 1336, 1321, 1332, 1332, 1332, 1322, 1323, 1324, 1327,

     1333, 1333, 1333, 1337, 1337, 1338, 1328, 1339, 1039, 1341,
     1330, 1331, 1334, 1342, 1335, 1343, 1336, 1344, 1347, 1348,
     1037, 1349, 1350, 1350, 1351, 1353, 1353, 1354, 1355, 1356,
     1356, 1338, 1360, 1339, 1341, 1357, 1357, 1357, 1361, 1342,
     1362, 1343, 1344, 1363, 1347, 1348, 1349, 1358, 1358, 1364,
     1351, 1365, 1367, 1354, 1355, 1359, 1359, 1359, 1360, 1368,
     1369, 1370, 1371, 1023, 1361, 1372, 1362, 1373, 1374, 1363,
     1375, 1376, 1376, 1377, 1377, 1364, 1365, 1367, 1378, 1379,
     1380, 1380, 1381, 1381, 1368, 1384, 1369, 1370, 1371, 1386,
     1372, 1387, 1373, 1374, 1389, 1375, 1390, 1391, 1014, 1392,

     1393, 1394, 1395, 1378, 1379, 1397, 1397, 1398, 1399, 1403,
     1384, 1400, 1400, 1404, 1386, 1401, 1401, 1387, 1405, 1405,
     1389, 1406, 1390, 1391, 1392, 1393, 1394, 1395, 1407, 1408,
     1013, 1409, 1398, 1399, 1412, 1403, 1413, 1413, 1415, 1404,
     1416, 1416, 1417, 1417, 1418, 1005, 1419, 1406, 1420, 1420,
     1421, 1422, 1004, 1424, 1407, 1408, 1409, 1425, 1425, 1427,
     1412, 1426, 1426, 1415, 1428, 1428, 1429, 1430, 1000, 1432,
     1418, 1419, 1435, 1436, 1437, 1437, 1421, 1422, 1424, 1438,
     1438, 1439, 1440, 1441, 1442, 1427, 1444, 1444, 1445, 1445,
     1446, 1447, 1429, 1430, 1432, 1448, 1449, 1435, 1450, 1436,

     1451, 1452, 1453, 1453, 1454, 1454, 1454, 1439, 1440, 1441,
     1442, 1455,  999, 1456, 1457, 1458, 1446, 1447, 1459, 1460,
     1464, 1448, 1449, 1461, 1450, 1451, 1465, 1452, 1462, 1462,
     1463, 1463, 1463, 1467, 1468, 1469, 1470, 1455, 1456, 1457,
     1458, 1471, 1471, 1472, 1459, 1460, 1464, 1473, 1461, 1474,
     1474, 1465, 1475,  992, 1477, 1478, 1479, 1480, 1467, 1468,
     1469, 1482, 1470, 1481, 1481, 1483, 1483, 1485, 1472, 1488,
     1489, 1489, 1490, 1473, 1491, 1492, 1493, 1496, 1475, 1477,
     1478, 1479, 1480, 1494, 1495, 1497, 1498, 1482, 1499, 1500,
      986, 1501, 1485, 1502, 1503, 1488, 1504, 1506, 1490, 1508,

     1491, 1492, 1493, 1496, 1510, 1511, 1509, 1513, 1494, 1495,
     1497, 1512, 1498, 1514, 1499, 1500, 1501, 1517, 1502, 1503,
     1518, 1519, 1504, 1506, 1508, 1509, 1520, 1521, 1522, 1510,
     1524, 1511, 1509, 1513, 1525, 1533, 1512, 1526, 1526, 1514,
     1529, 1529, 1531, 1517, 1530, 1530, 1518, 1519, 1532, 1532,
     1509, 1534, 1520, 1521, 1522, 1524, 1535, 1537, 1537,  979,
     1525, 1533, 1538, 1538,  971,  966,  920, 1531,  916,  914,
      906,  901,  887,  875,  874,  871,  870, 1534,  847,  841,
      829,  828, 1535, 1540, 1540, 1540, 1541, 1541, 1544, 1544,
      819,  817,  804,  803,  798,  795,  790,  788,  787,  778,

      772,  762,  757,  731,  728,  725,  723,  717,  711,  707,
      706,  703,  693,  680,  647,  644,  642,  641,  625,  612,
      611,  610,  594,  589,  582,  579,  546,  545,  538,  530,
      528,  527,  524,  512,  505,  480,  475,  469,  459,  437,
      413,  407,  386,  380,  379,  374,  364,  357,  346,  343,
      342,  327,  294,  291,  286,  285,  267,  264,  251,  234,
      229,  223,  209,  208,  176,  164,  163,  161,  154,  152,
      146,  140,  122,  119,  118,  109,   93,   91,   90,   66,
       47,   26,    7,    3, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex_conf.l"
#line 2 "lex_conf.l"
#include <math.h>
#include <ctype.h>
#include <stdlib.h>

#include "configManagement.h"
#include "attributesInfo.h"
#include "random.h"
#include "messageBuffer.h"

char *charFilter(char *string);
extern configManagement cm;
extern attributesInfo ai;
extern Random rnd;
extern messageBuffer mb;


#line 1660 "lex.yy.cpp"
#line 1661 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 23 "lex_conf.l"


#line 1881 "lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1540 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3085 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 25 "lex_conf.l"
{
/*	int atributs=atoi(charFilter(yytext));
	ai.setNumAttributes(atributs);
	mb.printf("Number of attributes in domain:%d\n"
		,atoi(charFilter(yytext)));*/
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_CROSSOVER);
	mb.printf("Crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),POP_SIZE);
	mb.printf("Popsize: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),ITERATIONS);
	mb.printf("GA Iterations:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MIN_CLASSIFIERS);
	mb.printf("Minumum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MAX_CLASSIFIERS);
	mb.printf("Maximum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lex_conf.l"
{
	cm.setParameter(1,IGNORE_MISSING_VALUES);
	mb.printf("Ignore missing values\n");
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "lex_conf.l"
{
	cm.setParameter(1,DUMP_EVOLUTION_STATS);
	mb.printf("Dump learning process statistics at each iteration\n");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "lex_conf.l"
{
	if(!strcasecmp(yytext+20,"TOURNAMENT")) {
		cm.setParameter(TOURNAMENT_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection Algorithm\n");
	} else if(!strcasecmp(yytext+20,"TOURNAMENTWOR")) {
		cm.setParameter(TOURNAMENT_WOR_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection without replacement Algorithm\n");
	} else if(!strcasecmp(yytext+20,"PARETO")) {
		cm.setParameter(PARETO_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Pareto Selection Algorithm\n");
	} else {
		mb.printf("Unknown selection algorithm:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),TOURNAMENT_SIZE);
	mb.printf("Tournament size:%f\n",atof(charFilter(yytext)));
}									       
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 91 "lex_conf.l"
{
	cm.setParameter(1,SHOW_FRONTS);
	mb.printf("Show Pareto Fronts\n");
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "lex_conf.l"
{
	if(!strcasecmp(&yytext[19],"1PX")) {
		cm.setParameter(CROSS_1P,CROSSOVER_OPERATOR);
		mb.printf("One Point Crossover\n");
	} else if(!strcasecmp(&yytext[19],"2PX")) {
		cm.setParameter(CROSS_2P,CROSSOVER_OPERATOR);
		mb.printf("Two Points Crossover\n");
	} else if(!strcasecmp(&yytext[19],"INFORMED")) {
		cm.setParameter(CROSS_INFORMED,CROSSOVER_OPERATOR);
		mb.printf("Informed Crossover\n");
	} else {
		mb.printf("Unknown crossover operator:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "lex_conf.l"
{
	if(!strcasecmp(yytext+17,"ACCURACY")) {
		cm.setParameter(MAXIMIZE,MAX_MIN);
		cm.setParameter(ACCURACY,FITNESS_FUNCTION);
		mb.printf("Squared accuracy fitness function\n");
	} else if(!strcasecmp(yytext+17,"MDL")) {
		cm.setParameter(MINIMIZE,MAX_MIN);
		cm.setParameter(MDL,FITNESS_FUNCTION);
		mb.printf("MDL fitness function\n");
	} else {
		mb.printf("Unknown fitness function:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT);
	mb.printf("MDL fixed weight %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT_RELAX_FACTOR);
	mb.printf("MDL Weight relax factor %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MDL_INITIAL_TL_RATIO);
	mb.printf("Initial theory length proportion in MDL formula: %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MDL_ITERATION);
	mb.printf("Iteracio activacio MDL %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_ITERATION);
	mb.printf("Pruning operator activated at iteration:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 153 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_MIN_CLASSIFIERS);
	mb.printf("Pruning stops if #classifiers is less that %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD);
	mb.printf("The number of min classifiers is automatically set\n");
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 162 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD2);
	mb.printf("The number of min classifiers is automatically set2\n");
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 167 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PRUNING_AUTO_OFFSET);
	mb.printf("The min classifiers offset %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_INDIVIDUAL_MUTATION);
	mb.printf("Individual-wise mutation probability:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 177 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,HIERARCHICAL_SELECTION_ITERATION);
	mb.printf("Hierarchical selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 183 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),HIERARCHICAL_SELECTION_THRESHOLD);
	mb.printf("Hierarchical selection threshold :%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 189 "lex_conf.l"
{
	cm.setParameter(1,HIERARCHICAL_SELECTION_USES_MDL);
	mb.printf("Hierarchical selection uses MDL Theory Length\n");
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 194 "lex_conf.l"
{
	cm.setParameter(1,CHECK_WINDOWING);
	mb.printf("Performance tests of windowing enabled");
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 199 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_ILAS);
	mb.printf("ILAS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 204 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_GWS);
	mb.printf("GWS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 210 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_ONE);
	mb.printf("Probability of value ONE for GABIL and ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 216 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SHARP);
	mb.printf("Probability of value Sharp for LCS/Instances KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 222 "lex_conf.l"
{
	cm.setParameter(1,KR_ADI);
	mb.printf("Using Adaptive Discretization Intervals Knowledge Representation\n");
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 227 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_MERGE);
	mb.printf("Probability of merge operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 233 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_SPLIT);
	mb.printf("Probability of split operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 239 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE);
	mb.printf("Probability of reinitialize operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 245 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE_AT_END);
	mb.printf("Probability of reinitialize operator at final iteration in ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 251 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MAX_INTERVALS);
	mb.printf("Maximum number of intervals per attribute in ADI KR:%d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 257 "lex_conf.l"
{
	cm.setParameter(1,KR_HYPERRECT);
	mb.printf("Using HYPERRECT Knowledge Representation\n");
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 262 "lex_conf.l"
{
	cm.setParameter(1,KR_LCS);
	mb.printf("Using LCS Knowledge Representation\n");
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 267 "lex_conf.l"
{
	cm.setParameter(1,KR_INSTANCE_SET);
	mb.printf("Using Instance Set/1-NN Knowledge Representation\n");
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 272 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,ALPHA_OF_BLX);
	mb.printf("Using BLX crossover with alpha:%f\n" 
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 278 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,D_OF_FR);
	mb.printf("Using FR crossover with D:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 283 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,N_OF_SBX);
	mb.printf("Using SBX crossover with N:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "lex_conf.l"
{
	rnd.setSeed((unsigned long int)atof(charFilter(yytext)));
	mb.printf("Random seed specified:%s\n",yytext+12);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 293 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE);
	mb.printf("Penalize the individuals that have a size less than %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 299 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE_AT_END);
	mb.printf("Penalize the individuals that have a size less than %d at end\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 305 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PARETO_SELECTION_ITERATION);
	mb.printf("Pareto selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 312 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)) ,TOTAL_TIME);
	mb.printf("Time spent on the learning process %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 318 "lex_conf.l"
{
	if(!strcasecmp(yytext+14,"MAJOR")) {
		cm.setParameter(MAJOR,DEFAULT_CLASS);
		mb.printf("Majoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"MINOR")) {
		cm.setParameter(MINOR,DEFAULT_CLASS);
		mb.printf("Minoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"DISABLED")) {
		cm.setParameter(DISABLED,DEFAULT_CLASS);
		mb.printf("Default class disabled\n");
	} else if(!strcasecmp(yytext+14,"AUTO")) {
		cm.setParameter(AUTO,DEFAULT_CLASS);
		mb.printf("Automatical determination of default class\n");
	} else if(!strcasecmp(yytext+14,"AUTO2")) {
		cm.setParameter(AUTO,DEFAULT_CLASS);
		cm.setParameter(1,HARD_NICHING_DISABLE);
		mb.printf("Automatical determination of default class with alternative niching disabling code\n");
         } else if(!strcasecmp(yytext+14,"FIXED")) {
                cm.setParameter(FIXED,DEFAULT_CLASS);
                mb.printf("Default class fixed\n");
         } else {
                mb.printf("Unknown default class policy:%s\n",yytext);
                exit(1);
	}
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 344 "lex_conf.l"
{
        cm.setParameter(atoi(charFilter(yytext)) ,FIXED_DEFAULT_CLASS);
        mb.printf("User fixed default class %d\n"
                   ,atoi(charFilter(yytext)));
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 350 "lex_conf.l"
{
	cm.setParameter(1 ,SMART_INIT);
	mb.printf("Initialization uses examples to create the initial rules\n");
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 355 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_INIT);
	mb.printf("Instances used in initialization are sampled with uniform class distribution\n");
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 360 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_ACC);
	mb.printf("Training accuracy computation will be class-wise\n");
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 366 "lex_conf.l"
{
	cm.setParameter(1 ,DUMP_ACTIVATION);
	mb.printf("Dump average activation after initialization\n");
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 372 "lex_conf.l"
{
	 if(!strcasecmp(yytext+15,"FTB")) {
		cm.setParameter(FTB,PRUNING_POLICY);
		mb.printf("Rule pruning policy is front to back\n");
	} else if(!strcasecmp(yytext+15,"BTF")) {
		cm.setParameter(BTF,PRUNING_POLICY);
		mb.printf("Rule pruning policy is back to front\n");
	} else if(!strcasecmp(yytext+15,"RANDOM")) {
		cm.setParameter(RANDOM,PRUNING_POLICY);
		mb.printf("Rule pruning policy is random\n");
	} else {
		mb.printf("Unknown pruning policy:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 389 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SMART_CROSSOVER);
	mb.printf("Smart crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 394 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),NUM_PARENTS_SMART_CROSSOVER);
	mb.printf("Number of parents in smart crossover: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 400 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),FILTER_SMART_CROSSOVER);
	mb.printf("Smart crossover filter threshold: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 406 "lex_conf.l"
{
	cm.setParameter(1,ADD_RULES_SMART_CROSSOVER);
	mb.printf("Smart crossover adds new rules\n");
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 411 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_ORDERING);
	mb.printf("Number of repetitions of the rule ordering process in SmartX: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 416 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_WITH_SMART_CROSSOVER);
	mb.printf("Elitism stage will use smart crossover\n");
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 420 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_LAST_ITERATION_WITH_SMART_CROSSOVER);
	mb.printf("Last iteration of elitism stage will use smart crossover\n");
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 426 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_CLEANING_PROB);
	mb.printf("Rule cleaning probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 431 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_GENERALIZING_PROB);
	mb.printf("Rule generalizing probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 437 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),DUMP_GENOTYPE_ITERATIONS);
	mb.printf("Genotype of best individual is dumped every %d iterations\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 442 "lex_conf.l"
{
	mb.enable();
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 446 "lex_conf.l"
{
	mb.printf("Crossover will use informed cut points (cutPoints.dat)\n");
	cm.setParameter(1,INFORMED_CROSSOVER);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 451 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_INIT);
	mb.printf("Coverage ratio in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 456 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),EXPRESSED_ATT_INIT);
	mb.printf("Number of expressed attributes in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 462 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_BREAKPOINT);
	mb.printf("Coverage breakpoint for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 467 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_RATIO);
	mb.printf("Coverage ratio for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 473 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_LEARNING);
	mb.printf("Number of times we will try to learn a rule from the current training set: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 478 "lex_conf.l"
{
	mb.printf("Intervalar representation will use rotations\n");
	cm.setParameter(1,ROTATE_HYPERRECTANGLES);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 483 "lex_conf.l"
{
	mb.printf("Only a subset of attributes will be rotated (rotatedAttributes.dat)\n");
	cm.setParameter(1,RESTRICTED_ROTATED_ATTRIBUTES);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 489 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_INIT);
	mb.printf("Probability of setting an angle to 0 degrees in initialization: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 494 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_MUT);
	mb.printf("Probability of setting an angle to 0 degrees in mutation: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 499 "lex_conf.l"
{
	mb.printf("Hyperrectangle attribute list knowledge representation\n");
	cm.setParameter(1,HYPERRECT_LIST);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 504 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_GENERALIZE_LIST);
	mb.printf("Probability of generalizing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 508 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SPECIALIZE_LIST);
	mb.printf("Probability of specializing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 513 "lex_conf.l"
{
	mb.printf("Using the coverage breakpoint adjustment heuristic\n");
        cm.setParameter(1,COVERAGE_BREAK_HEURISTIC);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 519 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),ITERATIONS_COVADJ);
	mb.printf("Number of iterations of the coverage break adjustement heuristic: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 524 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),POPULATIONS_COVADJ);
	mb.printf("Number of populations used in the coverage break adjustement heuristic: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 529 "lex_conf.l"
{
        cm.setParameter(atof(charFilter(yytext)),NUM_ATTS_K);
        mb.printf("Expected number of attributes: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 534 "lex_conf.l"
{
        cm.setParameter(atof(charFilter(yytext)),DEVICE_SELECTED);
        mb.printf("Device selected through configuration: %f\n",atof(charFilter(yytext)));

}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 540 "lex_conf.l"
{
        cm.setParameter(atof(charFilter(yytext)),PERC_DEVICE_MEM);
        mb.printf("Percentage of device memory used: %f\n",atof(charFilter(yytext)));

}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 546 "lex_conf.l"
{
        mb.printf("CUDA Enabled fitness function activated\n");
        cm.setParameter(1,CUDA_ENABLED);
}
	YY_BREAK
case 87:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 556 "lex_conf.l"
/* eat up one-line comments */
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 558 "lex_conf.l"
/* eat up whitespace */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 560 "lex_conf.l"
mb.printf( "Unrecognized character: %s\n", yytext );
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 562 "lex_conf.l"
ECHO;
	YY_BREAK
#line 2738 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1540 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1540 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1539);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 562 "lex_conf.l"

int yywrap ()
{
	return 1;
}

char *charFilter(char *string)
{
	while(*string && !(isdigit(*string) || *string=='-')) string++;
	return string;
}

void parseConfig(char *configFile)
{
	int i;

	yyin = fopen( configFile, "r" );
	yylex();
}								 

